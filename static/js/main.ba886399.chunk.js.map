{"version":3,"sources":["store/user/types.ts","store/user/actions.ts","Components/ErrorMeesage/index.tsx","mockApi/User.ts","Components/LoginAndRegister/Login/index.tsx","store/post/types.ts","Components/LoginAndRegister/Register/index.tsx","Components/LoginAndRegister/index.tsx","Components/Header/index.tsx","store/post/actions.ts","mockApi/Post.ts","Components/PostSummary/index.tsx","Pages/Home/index.tsx","Components/PostContent/index.tsx","Pages/Post/index.tsx","Pages/index.tsx","Container/App.tsx","serviceWorker.ts","store/post/index.ts","store/rootReducer.ts","store/index.ts","index.tsx","mockApi/markdownexam.md"],"names":["userTypes","userPending","action","LOGIN_REQUEST_PENDING","userSuccess","LOGIN_REQUEST_SUCCESS","userError","LOGIN_REQUEST_ERROR","userLogout","LOGUOT_USER","ErrorMeesage","text","className","accessUser","LoginRequest","user","a","Name","Password","console","log","Promise","resolve","id","Math","random","reject","Login","state","validation","succesMessage","type","Message","FormRef","React","createRef","submit","e","preventDefault","validateInput","setState","props","getValues","then","res","handleClose","catch","err","show","this","ref","Form","onSubmit","bind","Group","controlId","Label","Control","name","placeholder","Button","variant","Component","connect","dispatch","bindActionCreators","userActions","hasInvalid","current","Inputs","getElementsByTagName","z","length","value","classList","add","remove","data","postTypes","Register","posts","post","LoginAndRegister","LoginSwitch","Modal","onHide","Header","closeButton","Title","Body","onClick","Nav","activeKey","onSelect","selectedKey","alert","Item","to","link","TypesItemContainer","postPending","GET_POST_PENDING","postSuccess","GET_POST_SUCCESS","postError","GET_POST_ERROR","getPosts","readmePath","require","example","Posts","fetch","source","split","map","markdown","i","title","imagePath","content","filter","error","PostSummary","key","BlogContainer","src","postActions","Home","PostContent","Post","match","matchPath","history","location","pathname","path","exact","strict","params","Id","postId","parseInt","index","component","App","Boolean","window","hostname","INITIAL_STATE","pending","reducer","payload","combineReducers","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.ba886399.chunk.js","sourcesContent":["// Types\nexport enum userTypes {\n    LOGIN_REQUEST_PENDING = '@USER/LOGIN_REQUEST_PENDING',\n    LOGIN_REQUEST_SUCCESS = '@USER/LOGIN_REQUEST_SUCCESS',\n    LOGIN_REQUEST_ERROR = '@USER/LOGIN_REQUEST_ERROR',\n    LOGUOT_USER = '@USER/LOGUOT_USER'\n}\n\n//Data Types\n\nexport interface User {\n    Name: string | null,\n    id: number | null,\n}\n\n// state type\n\nexport interface userState {\n    readonly loggedIn: boolean,\n    readonly pending: boolean,\n    readonly error: boolean\n}\n\n// Creattors","import { action } from 'typesafe-actions'\nimport { userTypes, User } from './types'\n\nexport const userPending = () => action(userTypes.LOGIN_REQUEST_PENDING);\n\nexport const userSuccess = () => action(userTypes.LOGIN_REQUEST_SUCCESS);\n\nexport const userError = () => action(userTypes.LOGIN_REQUEST_ERROR);\n\nexport const userLogout = () => action(userTypes.LOGUOT_USER)","import React, { ReactElement } from 'react'\nimport './style.scss'\ninterface Props {\n    text: string\n}\n\nexport default function ErrorMeesage({ text }: Props): ReactElement {\n    return (\n        <div className=\"error\">\n            <p>{text}</p>\n        </div>\n    )\n}\n","\ninterface LoginType {\n    Name: string,\n    Password?: string\n}\nconst accessUser = {\n    Name: \"Admin\",\n    Password: \"root\"\n}\nexport const LoginRequest = async (user: LoginType) => {\n    const { Name, Password } = user\n    console.log(Name, Password)\n    if(accessUser.Name == Name && accessUser.Password == Password) {\n        return Promise.resolve({\n            Name: \"Admin\",\n            id: Math.random()\n        })\n    }else {\n        return Promise.reject('Kullanıcı adı yada şifre hatalı!')\n    }\n}","import React, { Component } from 'react'\nimport { Modal, Form, Button } from 'react-bootstrap'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as userActions from '../../../store/user/actions'\nimport { ApplicationState } from '../../../store'\nimport { User } from '../../../store/user/types'\nimport { State, Props } from '../index'\nimport ErrorMessage from '../../ErrorMeesage'\nimport { LoginRequest } from '../../../mockApi/User'\ninterface DispatchProps {\n    userPending(): void,\n    userSuccess(): void,\n    userError(): void,\n}\ntype LoginProps = State & DispatchProps & Props\nclass Login extends Component<LoginProps> {\n    state = {\n        validation: false,\n        succesMessage: {\n            type: 0,\n            Message: \"\"\n        }\n    }\n    private FormRef = React.createRef<HTMLDivElement>()\n\n    submit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        validateInput(this.FormRef);\n        var validate = validateInput(this.FormRef);\n        if (validate) {\n            this.setState({\n                succesMessage: {\n                    type: 2,\n                    Message: \"Tüm alanları doldurunuz!\"\n                }\n            })\n            return\n        } else {\n            var a = 0\n            this.setState({\n                succesMessage: {\n                    type: 0,\n                    Message: \"\"\n                }\n            })\n            this.props.userPending()\n            LoginRequest(getValues(this.FormRef)).then(res => {\n                this.setState({\n                    succesMessage: {\n                        type: 1,\n                        Message: \"Giriş Başarılı.\"\n                    }\n                })\n                this.props.userSuccess()\n                this.props.handleClose();\n            }).catch((err) => {\n                this.props.userError()\n                this.setState({\n                    succesMessage: {\n                        type: 2,\n                        Message: err\n                    }\n                })\n            })\n        }\n    }\n    render() {\n        const { show } = this.props\n        return (\n            <div className={`${!show && \"rightToLeft\"}`} ref={this.FormRef}>\n                <Form onSubmit={this.submit.bind(this)}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Kullanıcı Adı</Form.Label>\n                        <Form.Control type=\"text\" name=\"Name\" placeholder=\"Kullanıcı Adı\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Şifre</Form.Label>\n                        <Form.Control type=\"password\" name=\"Password\" placeholder=\"Password\" />\n                    </Form.Group>\n                      {\n                        this.state.succesMessage.type === 1 &&\n                        <p> {this.state.succesMessage.Message} </p>\n                    }\n                    {\n                        this.state.succesMessage.type === 2 &&\n                        <ErrorMessage text={this.state.succesMessage.Message} />\n                    }\n                    <Button variant=\"primary\" type=\"submit\">\n                        Giriş\n                    </Button>\n                </Form>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state: ApplicationState) => ({\n})\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(userActions, dispatch)\n\n// redux bağlantısı eksik... -----\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nexport function validateInput(ref: React.RefObject<HTMLDivElement>) {\n    var hasInvalid = false\n    if (ref.current) {\n        const Inputs = ref.current.getElementsByTagName('input');\n        for (var z = 0; z < Inputs.length; z++) {\n            if (Inputs[z].value.length === 0) {\n                Inputs[z].classList.add('invalid')\n                hasInvalid = true\n            } else {\n                Inputs[z].classList.remove('invalid')\n            }\n        }\n    }\n    return hasInvalid\n}\nexport function getValues(ref: React.RefObject<HTMLDivElement>) {\n    var data: any = {}\n    if (ref.current) {\n        const Inputs = ref.current.getElementsByTagName('input');\n        for (var z = 0; z < Inputs.length; z++) {\n            data[Inputs[z].name] = Inputs[z].value\n        }\n    }\n    return data\n}\n\n","// Types\nexport enum postTypes {\n    GET_POST_PENDING = '@POST/GET_POST_PENDING',\n    GET_POST_SUCCESS = '@POST/GET_POST_SUCCESS',\n    GET_POST_ERROR = '@POST/GET_POST_ERROR'\n}\n\n//Data Types\n\nexport interface Post {\n    id: number,\n    title: string,\n    content: string,\n    imagePath: string\n}\n\n// state type\n\nexport interface postState {\n    readonly data: Post[],\n    readonly pending: boolean,\n    readonly error: boolean\n}\n\n// Creattors","\nimport React, { Component } from 'react'\nimport { Modal, Form, Button } from 'react-bootstrap'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as userActions from '../../../store/user/actions'\nimport { ApplicationState } from '../../../store'\n// import { User } from '../../../store/user/types'\nimport { State, Props } from '../index'\nimport { validateInput } from '../Login'\nimport ErrorMeesage from '../../ErrorMeesage'\nclass Register extends Component<Props, State> {\n    state = {\n        validation: false\n    }\n    private FormRef = React.createRef<HTMLDivElement>()\n\n    submit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        var validate = validateInput(this.FormRef);\n        if(validate){\n            this.setState({\n                validation: true\n            })\n            return \n        }\n    }\n    render() {\n        const { show } = this.props\n        return (\n            <div className={`${!show && \"leftToRight\"}`} ref={this.FormRef}>\n                <Form onSubmit={this.submit.bind(this)}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Kullanıcı Adı</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Kullanıcı Adı\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Şifre</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Şifre\" />\n                    </Form.Group>\n                    {\n                        this.state.validation && \n                        <ErrorMeesage text=\"Tüm alanları doldurunuz!\" />\n                    }\n                    <Button variant=\"primary\" type=\"submit\">\n                        Kaydol\n                    </Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    posts: state.post.data\n})\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(userActions, dispatch)\n\n// redux bağlantısı eksik... -----\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { Component } from 'react'\nimport { Modal, Form, Button } from 'react-bootstrap'\nimport { User } from '../../store/user/types'\nimport { bindActionCreators,Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as userActions from '../../store/user/actions'\nimport { ApplicationState } from '../../store'\nimport Login from './Login'\nimport Register from './Register'\nimport './style.scss'\nexport interface Message {\n    type: number\n    message: string\n}\n//type 0 => no action\n//type 1 => success\n//type 2 => error\nexport interface Props {\n    show: boolean,\n    handleClose: () => void\n}\nexport interface State {\n    LoginSwitch?: boolean\n    validation?: boolean\n    succesMessage?: Message\n}\n\nexport default class LoginAndRegister extends Component<Props, State> {\n    state = {\n        LoginSwitch: true\n    }\n    render() {\n        return (\n            <Modal className=\"LoginModal\" show={this.props.show} onHide={this.props.handleClose.bind(this)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {\n                            this.state.LoginSwitch ? \"Giriş\" : \"Kaydol\"\n                        }\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"Content\">\n                        <Login handleClose={this.props.handleClose} show={this.state.LoginSwitch} />\n                        <Register handleClose={this.props.handleClose}  show={!this.state.LoginSwitch} />\n                    </div>\n                    <div className=\"LoginSwitch\">\n                        <p onClick={() => this.setState({ LoginSwitch: true })}>Giriş</p>\n                        <p onClick={() => this.setState({ LoginSwitch: false })}>Kaydol</p>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n}\n","import React from 'react'\nimport { Nav, NavDropdown } from 'react-bootstrap'\nimport {\n    Link\n} from \"react-router-dom\";\nimport './style.scss';\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport * as userActions from '../../store/user/actions'\nimport { ApplicationState } from '../../store'\nimport { User } from '../../store/user/types'\nimport LoginAndRegister from '../LoginAndRegister'\ninterface Props {\n}\ninterface DispatchProps {\n    userLogout: () => void\n}\ninterface State {\n    // loggedIn: boolean\n}\ntype LoginProps = State & DispatchProps & Props\nclass Header extends React.Component<LoginProps> {\n    state = {\n        show: false\n    }\n    public render() {\n        const { show } = this.state\n        return (\n            <>\n                <Nav\n                    activeKey=\"/\"\n                    onSelect={(selectedKey: any) => alert(`selected ${selectedKey}`)}\n                >\n                    <Nav.Item>\n                        <Link className=\"nav-link\" to=\"/\">Logo</Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <div className=\"TypesDD\">\n                            <p className=\"nav-link DD\">Types</p>\n                            <div className=\"Items\">\n                                <TypesItemContainer link={\"link1\"} text={\"link1\"} />\n                                <TypesItemContainer link={\"link2\"} text={\"link2\"} />\n                                <TypesItemContainer link={\"link3\"} text={\"link3\"} />\n                                <TypesItemContainer link={\"link4\"} text={\"link4\"} />\n                            </div>\n                        </div>\n\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Link className=\"nav-link\" to=\"/Post\">Link</Link>\n                    </Nav.Item>\n                    {/* {\n                        this.props.loggedIn ?\n                            <Nav.Item>\n                                <div onClick={() => { this.props.userLogout() }} className=\"nav-link\">Çıkış</div>\n                            </Nav.Item>\n                            : */}\n                            <Nav.Item>\n                                <div onClick={() => { if (!show) this.setState({ show: true }) }} className=\"nav-link\">Giriş Yap</div>\n                            </Nav.Item>\n                    {/* } */}\n                </Nav>\n                <LoginAndRegister show={show} handleClose={() => this.setState({ show: false })} />\n            </>\n        );\n    }\n}\n\ninterface TypesItemContainerProps {\n    link: string,\n    text: string\n}\n\n\nconst TypesItemContainer: React.FC<TypesItemContainerProps> = ({ link, text }) => {\n    return <Link className=\"Item nav-link\" to={link} >{text}</Link>\n}\nconst mapStateToProps = (state: ApplicationState) => ({\n    // loggedIn: state.user.loggedIn\n})\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(userActions, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import { action } from 'typesafe-actions'\nimport { postTypes, Post } from './types'\n\nexport const postPending = () => action(postTypes.GET_POST_PENDING);\n\nexport const postSuccess = (data: Post[]) => action(postTypes.GET_POST_SUCCESS, data);\n\nexport const postError = () => action(postTypes.GET_POST_ERROR);\n","import { Post } from '../store/post/types'\ntype postsType = Post[]\n\nexport async function getPosts(id?: number): Promise<any> {\n    const readmePath = require(\"./markdownexam.md\");\n    var example: Array<string> = []\n    var Posts: postsType = []\n    return fetch(readmePath)\n        .then(res => res.text())\n        .then(source => {\n            example = source.split('--next--')\n            Posts = example.map((markdown: string, i: number) => {\n                var [title, imagePath, content] = markdown.split('--nextContent--')\n                return {\n                    id: i,\n                    title,\n                    content,\n                    imagePath\n                }\n            })\n            if (typeof id == 'number') {\n                return Promise.resolve(Posts.filter(post => post.id === id))\n            }\n            return Promise.resolve(Posts)\n        })\n        .catch((err) => {\n            console.error(err)\n            return Promise.reject(\"Couldn't find data\")\n        });\n\n}","import React, { Component } from 'react'\nimport './style.scss'\nimport { bindActionCreators,Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { ApplicationState } from '../../store'\nimport { Post } from '../../store/post/types'\nimport * as postActions from '../../store/post/actions'\nimport { getPosts } from '../../mockApi/Post'\nimport { Link } from 'react-router-dom'\n\ninterface State {\n    posts: Post[]\n}\ninterface ownProps {\n    \n}\ninterface DispatchProps {\n    postPending(): void,\n    postSuccess(data:Post[] ): void,\n    postError(): void,\n\n}\ntype Props = State & DispatchProps & ownProps \nclass PostSummary extends Component<Props> {\n  \n    componentDidMount() {\n        if(this.props.posts.length > 0){return }\n        console.log(\"object\")\n        this.props.postPending()\n        getPosts().then(data => {\n            this.props.postSuccess(data)\n        }).catch( () => this.props.postError())\n    }\n    render() {\n        return (\n            <div className=\"PostsContainer\">\n                {\n                    this.props.posts.map(post =>\n                        <BlogContainer key={post.id} {...post} />\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nclass BlogContainer extends Component<Post> {\n    render() {\n        const { id, title, imagePath } = this.props\n        return (\n            <Link to={`/${id}`} className=\"PostSummary\">\n                <img className=\"Image\" src={`./${imagePath}`} />\n                <p className=\"Title\"> {title} </p>\n            </Link>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    posts: state.post.data\n})\nconst mapDispatchToProps = (dispatch: Dispatch) => \nbindActionCreators(postActions, dispatch)\nexport default connect(mapStateToProps, mapDispatchToProps)(PostSummary);","import React, { Component } from 'react'\nimport  PostSummary  from '../../Components/PostSummary'\ninterface Props {\n    \n}\ninterface State {\n    \n}\n\nexport default class Home extends Component<Props, State> {\n    state = {}\n\n    render() {\n        return (\n            <div>\n                <PostSummary />\n            </div>\n        )\n    }\n}\n","import React, { ReactElement, useEffect, useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Post } from '../../store/post/types'\nimport './style.scss'\n\nexport default function PostContent(props: Post): ReactElement {\n    const {imagePath, title, content } = props\n    return (\n        <div className=\"PostContainer\">\n            <img src={`./${imagePath}`} />\n            <p className=\"title\">{title}</p>\n            <ReactMarkdown source={content} />\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport PostContent from '../../Components/PostContent'\nimport { matchPath } from \"react-router\";\nimport { RouteComponentProps } from 'react-router-dom';\nimport { getPosts } from '../../mockApi/Post'\nimport * as postTypes from '../../store/post/types'\ninterface Props extends RouteComponentProps {\n}\ninterface State {\n    post: postTypes.Post\n}\nexport default class Post extends Component<Props, State> {\n    state = {\n        post: {\n            id: -1,\n            title: \"\",\n            content: \"\",\n            imagePath: \"\"\n        }\n    }\n    componentDidMount() {\n        const match = matchPath(this.props.history.location.pathname, {\n            path: \"/:postId\",\n            exact: true,\n            strict: false\n        });\n        if (match) {\n            if (match.params) {\n                var params: any = match.params\n                if(params){\n                    var Id = params.postId\n                    getPosts(parseInt(Id)).then(post => {\n                        this.setState({\n                            post: post.length === 1 ? post[0] : []\n                        })\n                    }).catch(console.error)\n                }\n            }\n        }\n    }\n\n    render() {\n        const {id,title, imagePath, content } = this.state.post\n        return (\n            <div>\n                <PostContent id={id} title={title} imagePath={imagePath} content={content} />\n            </div>\n        )\n    }\n}\n","import React, { ReactElement } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport './style.scss'\nimport Home from './Home'\nimport Post from './Post';\ninterface Props {\n\n}\n\nexport default function index({ }: Props): ReactElement {\n    return (\n        <div className=\"Layout container\">\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/:postId\" component={Post} />\n            </Switch>\n        </div>\n\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport Header from '../Components/Header';\nimport Pages from '../Pages'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Pages />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Reducer } from 'redux'\nimport { postState, postTypes } from './types'\nconst INITIAL_STATE: postState = {\n    data: [],\n    error: false,\n    pending: false\n}\n\nconst reducer: Reducer<postState> = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case postTypes.GET_POST_PENDING:\n            return { ...state, pending: true }\n        case postTypes.GET_POST_SUCCESS:\n            return { ...state, pending: false, error: false, data: action.payload }\n        case postTypes.GET_POST_ERROR:\n            return { ...state, pending: false, error: true, data: [] }\n        default:\n            return state;\n    }\n\n};\nexport default reducer;","import { combineReducers } from 'redux'\nimport post from './post'\n\nexport default combineReducers({\n    post\n})","import { createStore, Store } from 'redux'\nimport { postState } from './post/types'\nimport { userState} from './user/types'\nimport rootReducer from './rootReducer'\nexport interface ApplicationState {\n    post: postState,\n    user: userState\n}\nconst store: Store<ApplicationState> = createStore(rootReducer)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/markdownexam.d58d0918.md\";"],"sourceRoot":""}